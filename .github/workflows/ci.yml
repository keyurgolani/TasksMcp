name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Verify build artifacts
        run: |
          echo "Checking dist directory..."
          ls -la dist/
          echo "Verifying CLI executable..."
          timeout 30s node .github/scripts/test-cli.mjs
          echo "Checking main entry point exists..."
          if [ -f "dist/index.js" ]; then
            echo "‚úÖ Main entry point exists"
          else
            echo "‚ùå Main entry point missing"
            exit 1
          fi
          echo "Validating main entry point syntax..."
          timeout 5s node --check dist/index.js && echo "‚úÖ Main entry validation complete"

      - name: Validate package.json
        run: node .github/scripts/validate-package.mjs

      - name: Check TypeScript compilation
        run: |
          echo "Checking TypeScript compilation..."
          npx tsc --noEmit --skipLibCheck

      - name: Validate MCP protocol compliance
        run: node .github/scripts/validate-mcp.mjs

      - name: Test package installation simulation
        run: |
          echo "Simulating package installation..."
          npm pack
          PACKAGE_FILE=$(ls *.tgz)
          echo "Created package: $PACKAGE_FILE"
          
          # Test in temporary directory
          mkdir -p /tmp/test-install
          cd /tmp/test-install
          npm init -y
          npm install $GITHUB_WORKSPACE/$PACKAGE_FILE
          
          echo "Testing installed package..."
          npx task-list-mcp --version
          
          echo "‚úÖ Package installation simulation passed"

  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=moderate
          
      - name: Check for known vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          npx audit-ci --moderate

  performance-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Performance validation
        run: |
          echo "Checking package size..."
          npm pack --dry-run
          
          echo "Checking startup time..."
          node .github/scripts/test-cli.mjs
          
          echo "Measuring memory usage..."
          node .github/scripts/check-memory.mjs

  documentation-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation completeness
        run: |
          echo "Checking required documentation files..."
          
          required_files=("README.md" "AGENTS.md" "LICENSE" "package.json")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            else
              echo "‚úÖ Found: $file"
            fi
          done
          
          echo "Checking README.md content..."
          if ! grep -q "MCP Task Manager" README.md; then
            echo "‚ùå README.md missing project title"
            exit 1
          fi
          
          if ! grep -q "installation" README.md; then
            echo "‚ùå README.md missing installation instructions"
            exit 1
          fi
          
          echo "Checking AGENTS.md content..."
          if ! grep -q "MCP Tools" AGENTS.md; then
            echo "‚ùå AGENTS.md missing MCP tools documentation"
            exit 1
          fi
          
          echo "‚úÖ Documentation validation passed"

  notify-status:
    needs: [build-and-validate, security-audit, performance-check, documentation-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: CI Status Summary
        run: |
          echo "## CI Pipeline Results"
          echo "Build & Validate: ${{ needs.build-and-validate.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Performance Check: ${{ needs.performance-check.result }}"
          echo "Documentation Check: ${{ needs.documentation-check.result }}"
          
          if [[ "${{ needs.build-and-validate.result }}" == "success" && 
                "${{ needs.security-audit.result }}" == "success" && 
                "${{ needs.performance-check.result }}" == "success" && 
                "${{ needs.documentation-check.result }}" == "success" ]]; then
            echo "üéâ All CI checks passed! Ready for release."
          else
            echo "‚ùå Some CI checks failed. Please review and fix issues."
            exit 1
          fi