name: Maintenance

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        type: choice
        options:
          - dependency-update
          - security-audit
          - performance-check
          - cleanup
          - all

jobs:
  dependency-update:
    if: github.event_name == 'schedule' || github.event.inputs.task == 'dependency-update' || github.event.inputs.task == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check for dependency updates
        id: deps
        run: |
          echo "Checking for dependency updates..."

          # Check for outdated packages
          npm outdated --json > outdated.json || true

          if [[ -s outdated.json ]]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "Outdated dependencies found:"
            cat outdated.json
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "All dependencies are up to date"
          fi

      - name: Update dependencies
        if: steps.deps.outputs.has-updates == 'true'
        run: |
          echo "Updating dependencies..."

          # Update patch and minor versions only
          npm update

          # Check if package-lock.json changed
          if git diff --quiet package-lock.json; then
            echo "No dependency updates applied"
          else
            echo "Dependencies updated, creating PR..."
            
            # Create branch for dependency updates
            BRANCH_NAME="maintenance/dependency-update-$(date +%Y%m%d)"
            git checkout -b "$BRANCH_NAME"
            
            # Commit changes
            git add package-lock.json
            git commit -m "chore: update dependencies

            Automated dependency update:
            - Updated patch and minor versions
            - Security patches applied
            - No breaking changes expected
            
            Generated by maintenance workflow"
            
            # Push branch
            git push origin "$BRANCH_NAME"
            
            # Create PR
            gh pr create \
              --title "chore: automated dependency updates" \
              --body "Automated dependency update PR created by maintenance workflow.

            ## Changes
            - Updated patch and minor versions of dependencies
            - Applied security patches where available
            - No breaking changes expected

            ## Validation
            - [ ] Build passes
            - [ ] All tests pass
            - [ ] No security vulnerabilities introduced

            This PR was automatically created. Please review and merge if all checks pass." \
              --label "dependencies,maintenance" \
              --assignee "${{ github.actor }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-audit:
    if: github.event_name == 'schedule' || github.event.inputs.task == 'security-audit' || github.event.inputs.task == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        id: audit
        run: |
          echo "Running comprehensive security audit..."

          # Run npm audit
          npm audit --json > audit-results.json || true

          # Check audit results
          VULNERABILITIES=$(node -p "
            const audit = JSON.parse(require('fs').readFileSync('audit-results.json', 'utf8'));
            audit.metadata ? audit.metadata.vulnerabilities.total : 0
          ")

          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT

          if [[ $VULNERABILITIES -gt 0 ]]; then
            echo "🚨 Security vulnerabilities found: $VULNERABILITIES"
            
            # Try to fix automatically
            npm audit fix --dry-run > audit-fix.txt || true
            
            if grep -q "fixed" audit-fix.txt; then
              echo "can-auto-fix=true" >> $GITHUB_OUTPUT
            else
              echo "can-auto-fix=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "✅ No security vulnerabilities found"
          fi

      - name: Create dynamic security issue
        if: steps.audit.outputs.vulnerabilities != '0' && steps.audit.outputs.can-auto-fix == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditResults = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));

            const vulnerabilities = auditResults.vulnerabilities || {};
            const advisories = auditResults.advisories || {};
            const metadata = auditResults.metadata || {};

            // Generate dynamic title with severity breakdown
            const severityCounts = metadata.vulnerabilities || {};
            const severityText = Object.entries(severityCounts)
              .filter(([key, value]) => key !== 'total' && value > 0)
              .map(([severity, count]) => `${count} ${severity}`)
              .join(', ');

            const title = `🚨 Security Alert: ${metadata.vulnerabilities?.total || 0} vulnerabilities (${severityText})`;

            let issueBody = `# 🔒 Security Vulnerability Report

            **Scan Date:** ${new Date().toISOString().split('T')[0]}
            **Total Vulnerabilities:** ${metadata.vulnerabilities?.total || 0}

            ## 📊 Severity Breakdown
            `;

            // Add severity breakdown
            ['critical', 'high', 'moderate', 'low'].forEach(severity => {
              const count = severityCounts[severity] || 0;
              const emoji = {
                critical: '🔴',
                high: '🟠', 
                moderate: '🟡',
                low: '🔵'
              }[severity];
              issueBody += `- ${emoji} **${severity.toUpperCase()}:** ${count}\n`;
            });

            issueBody += `\n## 🔍 Vulnerability Details\n\n`;

            // Group advisories by severity
            const advisoriesBySeverity = {};
            Object.entries(advisories).forEach(([id, advisory]) => {
              const severity = advisory.severity || 'unknown';
              if (!advisoriesBySeverity[severity]) {
                advisoriesBySeverity[severity] = [];
              }
              advisoriesBySeverity[severity].push({id, ...advisory});
            });

            // Output vulnerabilities by severity
            ['critical', 'high', 'moderate', 'low'].forEach(severity => {
              const sevAdvisories = advisoriesBySeverity[severity] || [];
              if (sevAdvisories.length > 0) {
                const emoji = {
                  critical: '🔴',
                  high: '🟠',
                  moderate: '🟡', 
                  low: '🔵'
                }[severity];
                
                issueBody += `### ${emoji} ${severity.toUpperCase()} Severity\n\n`;
                
                sevAdvisories.forEach(advisory => {
                  issueBody += `#### ${advisory.title}\n`;
                  issueBody += `- **Package:** \`${advisory.module_name}\`\n`;
                  issueBody += `- **Vulnerable Versions:** \`${advisory.vulnerable_versions}\`\n`;
                  issueBody += `- **Patched Versions:** \`${advisory.patched_versions || 'None available'}\`\n`;
                  issueBody += `- **CVSS Score:** ${advisory.cvss?.score || 'N/A'}\n`;
                  if (advisory.cwe) {
                    issueBody += `- **CWE:** ${advisory.cwe}\n`;
                  }
                  issueBody += `- **More Info:** [${advisory.url}](${advisory.url})\n\n`;
                  
                  if (advisory.overview) {
                    issueBody += `**Overview:** ${advisory.overview}\n\n`;
                  }
                  
                  if (advisory.recommendation) {
                    issueBody += `**Recommendation:** ${advisory.recommendation}\n\n`;
                  }
                  
                  issueBody += `---\n\n`;
                });
              }
            });

            issueBody += `## 🛠️ Remediation Steps

            ### Immediate Actions
            1. **Review** all vulnerabilities listed above
            2. **Prioritize** critical and high severity issues
            3. **Update** packages to patched versions where available
            4. **Test** thoroughly after applying updates

            ### Commands to Run
            \`\`\`bash
            # Check current vulnerabilities
            npm audit

            # Attempt automatic fixes
            npm audit fix

            # For manual fixes, update specific packages
            npm update [package-name]
            \`\`\`

            ### Verification
            - [ ] Run \`npm audit\` to verify fixes
            - [ ] Run full test suite
            - [ ] Verify application functionality
            - [ ] Update this issue with results

            ## 📈 Tracking
            - **Created:** ${new Date().toISOString()}
            - **Auto-fix Available:** ${auditResults.metadata?.vulnerabilities?.total > 0 ? 'Checking...' : 'No'}
            - **Status:** Open

            ---

            *This issue was automatically created by the maintenance workflow. It will be updated as vulnerabilities are resolved.*`;

            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,maintenance',
              state: 'open'
            });

            const hasOpenSecurityIssue = existingIssues.data.some(issue => 
              issue.title.includes('Security Alert') || issue.title.includes('Security Vulnerabilities')
            );

            if (hasOpenSecurityIssue) {
              console.log('Open security issue already exists, updating instead of creating new one');
              // Could update existing issue here
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: issueBody,
                labels: ['security', 'high-priority', 'maintenance', `severity-${Object.keys(severityCounts).find(k => k !== 'total' && severityCounts[k] > 0) || 'unknown'}`]
              });
            }

  performance-check:
    if: github.event_name == 'schedule' || github.event.inputs.task == 'performance-check' || github.event.inputs.task == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Performance benchmarks
        run: |
          echo "Running performance benchmarks..."

          # Package size check
          PACKAGE_SIZE=$(npm pack --dry-run 2>&1 | grep "package size" | awk '{print $3}' || echo "unknown")
          echo "Package size: $PACKAGE_SIZE"

          # Startup time check
          echo "Measuring startup time..."
          for i in {1..5}; do
            /usr/bin/time -f "%e" node dist/cli.js --version 2>&1 | tail -1
          done | awk '{sum+=$1} END {print "Average startup time:", sum/NR, "seconds"}'

          # Memory usage check
          echo "Measuring memory usage..."
          node -e "
            const startMemory = process.memoryUsage();
            require('./dist/index.js');
            const endMemory = process.memoryUsage();
            console.log('Memory usage (MB):');
            console.log('RSS:', Math.round((endMemory.rss - startMemory.rss) / 1024 / 1024));
            console.log('Heap Used:', Math.round((endMemory.heapUsed - startMemory.heapUsed) / 1024 / 1024));
          "

          # Build time check
          echo "Measuring build time..."
          rm -rf dist/
          /usr/bin/time -f "Build time: %e seconds" npm run build

  cleanup:
    if: github.event_name == 'schedule' || github.event.inputs.task == 'cleanup' || github.event.inputs.task == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Cleanup old branches
        run: |
          echo "Cleaning up old branches..."

          # Get merged branches older than 30 days
          git fetch --all

          OLD_BRANCHES=$(git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin | \
            awk '$2 < "'$(date -d '30 days ago' '+%Y-%m-%d')'"' | \
            grep -v 'origin/main\|origin/develop' | \
            awk '{print $1}' | \
            sed 's/origin\///' || true)

          if [[ -n "$OLD_BRANCHES" ]]; then
            echo "Found old branches to clean up:"
            echo "$OLD_BRANCHES"
            
            # Note: Actual deletion would require additional permissions
            echo "Branch cleanup would require manual intervention or additional permissions"
          else
            echo "No old branches found for cleanup"
          fi

      - name: Check for large files
        run: |
          echo "Checking for large files..."

          # Find files larger than 1MB
          find . -type f -size +1M -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "Large file found: $file ($size)"
          done || echo "No large files found"

  maintenance-summary:
    needs: [dependency-update, security-audit, performance-check, cleanup]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Maintenance Summary
        run: |
          echo "## Maintenance Workflow Summary"
          echo "Dependency Update: ${{ needs.dependency-update.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Performance Check: ${{ needs.performance-check.result }}"
          echo "Cleanup: ${{ needs.cleanup.result }}"

          echo ""
          echo "Maintenance completed at $(date)"

          if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "⚠️ Security issues detected - please review"
          fi
