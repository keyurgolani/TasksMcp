{
  "enabled": true,
  "name": "Comprehensive Code Quality & Best Practice Validator",
  "description": "Monitors code changes and performs comprehensive validation including best practices compliance, code quality, functionality, test coverage, documentation, and workspace cleanliness. AUTOMATICALLY FIXES all issues found and commits changes with appropriate messages.",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.ts",
      "src/**/*.js",
      "tests/**/*.ts",
      "tests/**/*.js",
      "package.json",
      "tsconfig.json",
      "eslint.config.js",
      "vitest.config.ts",
      "docs/**/*.md",
      "README.md",
      "CONTRIBUTING.md",
      "scripts/**/*.js",
      "scripts/**/*.sh",
      ".gitignore",
      "LICENSE"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "You are performing a comprehensive code quality validation WITH AUTOMATIC REMEDIATION. This validation ensures the project meets all quality standards and ACTIVELY FIXES issues found. Follow each phase systematically, fix problems immediately, and bring the workspace to expected state.\n\nCRITICAL MANDATE: YOU MUST FIX ALL ISSUES FOUND - NOT JUST REPORT THEM\n\nFor every issue discovered:\n1. Identify the problem\n2. Determine the fix\n3. Apply the fix immediately\n4. Verify the fix worked\n5. Continue to next issue\n\nDo NOT end your turn until the workspace is in the expected state with all validations passing.\n\nVALIDATION & REMEDIATION PHASES:\n\n## Phase 1: Code Quality Validation & Fixes\nObjective: Achieve zero errors, zero warnings, strict TypeScript compliance\n\n### TypeScript Compilation Check & Fix\n- Run: `timeout 60s npm run build`\n- If errors found:\n  - Read the error messages\n  - Identify affected files\n  - Fix each TypeScript error\n  - Re-run build to verify\n  - Repeat until zero errors\n- If warnings found:\n  - Fix each warning\n  - Re-run to verify\n- Verify: Strict mode enabled in tsconfig.json (enable if not)\n\n### Forbidden Pattern Removal\n- Search: `grep -r \"@ts-ignore\" src/ tests/`\n  - For each match: Remove the @ts-ignore and fix the underlying issue\n- Search: `grep -r \"@ts-expect-error\" src/ tests/`\n  - For each match: Remove and fix the underlying issue\n- Search: `grep -r \"eslint-disable\" src/ tests/`\n  - For each match: Remove and fix the linting issue\n- Search: `grep -r \"\\bany\\b\" src/ --include=\"*.ts\" | grep -v \"company\"`\n  - For each match: Replace with proper types\n\n### Naming Convention Fixes\n- Search: `find . -name \"*-v2*\" -o -name \"*-new*\" -o -name \"*-old*\" -o -name \"*-legacy*\" -o -name \"*-temp*\" -o -name \"*-backup*\" -o -name \"*-compat*\" -o -name \"*-sample*\"`\n- For each file found:\n  - Determine proper purpose-based name\n  - Rename file\n  - Update all imports/references\n  - Update tests\n  - Verify no broken references\n- Check for fluff qualifiers in names: \"improved\", \"enhanced\", \"compatible\", \"optimized\", \"simple\", \"sample\", \"basic\", \"comprehensive\"\n- Enforce kebab-case for file names, PascalCase for classes, camelCase for functions/variables\n- Remove state qualifiers (is, has, was, will), quality qualifiers (good, bad, valid, invalid), scope qualifiers (global, local, temp)\n\n### Linting Fixes\n- Run: `timeout 30s npm run lint`\n- If errors/warnings found:\n  - Fix each linting issue\n  - Re-run lint to verify\n  - Repeat until zero issues\n- Make linting configuration stricter by adding one new rule if all current issues are fixed\n\n### Best Practices Compliance Check\n- Verify compliance with coding-practices.md steering document:\n  - File and Directory Management (no duplicates, .kiro protection, proper reuse)\n  - File Migration and Refactoring (recreate from scratch, domain-driven structure)\n  - Use \"task\" terminology throughout - never \"todo\"\n  - No alternative/compatible/temporary versions of files\n  - Search before creating new files\n\nAction: Fix all code quality issues before proceeding to Phase 2\n\n## Phase 2: Functionality Validation & Fixes\nObjective: Achieve all tests passing with proper coverage\n\n### Unit Tests Fixes\n- Run: `timeout 120s npm test -- --run tests/unit`\n- If tests fail:\n  - Read failure messages\n  - Identify root cause\n  - Fix the implementation (not the test)\n  - Re-run tests\n  - Repeat until all pass\n- If tests skipped:\n  - Review why skipped\n  - Un-skip and fix if needed\n\n### Integration Tests Fixes\n- Run: `timeout 180s npm test -- --run tests/integration`\n- If tests fail:\n  - Fix each failure\n  - Verify cleanup (no hanging resources)\n  - Re-run until all pass\n\n### Test Coverage Improvements\n- Run: `timeout 120s npm test -- --run --coverage`\n- If coverage < 95% line coverage or < 90% branch coverage:\n  - Identify uncovered lines\n  - Write tests for uncovered code\n  - Focus on critical paths\n  - Re-run until coverage meets thresholds\n\n### Test Organization Fixes\n- Check: tests/unit/ mirrors src/ structure exactly\n- If mismatched:\n  - Reorganize test files to match\n  - Update imports\n  - Verify tests still run\n- Check: Each source file has corresponding unit test\n- If missing:\n  - Create missing test files\n  - Add comprehensive test coverage\n- Ensure each test file is executable independently\n- Verify all spawned threads are closed to prevent memory leaks\n\n### Flaky Test Investigation\n- If any tests are flaky or intermittently failing:\n  - Investigate thoroughly to identify root cause\n  - Fix the fundamental issue (application or test setup)\n  - Never ignore flaky tests - they indicate serious problems\n\nAction: Fix all functionality issues before proceeding to Phase 3\n\n## Phase 3: Architecture & Best Practices Validation & Fixes\nObjective: Ensure adherence to coding practices and domain-driven architecture\n\n### TODO Removal\n- Search: `grep -r \"TODO\" src/ tests/`\n- For each TODO:\n  - Complete the TODO item\n  - Remove the TODO comment\n  - Verify functionality works\n\n### Architecture Compliance Fixes\n- Verify domain-driven architecture:\n  - Configuration Management domain\n  - MCP Tools domain with consolidated schema\n  - Application Model domain for entities\n  - Core Orchestration domain for CRUD operations\n  - Data Delegation domain for multiple backing stores\n  - Data Access domain for storage implementations\n  - REST API domain parallel to MCP tools\n- Search for direct data store access:\n  `grep -r \"dataStore\\.\" src/mcp/ src/rest/ src/ui/`\n- For each violation:\n  - Refactor to use orchestration layer\n  - Update imports\n  - Verify functionality preserved\n\n### Prohibited Features Removal\n- Search and remove monitoring systems: `grep -r \"monitoring\" src/`\n- Search and remove alerting systems: `grep -r \"alert\" src/`\n- Search and remove intelligence features: `grep -r \"intelligence\\|suggestion\\|complexity\" src/`\n- Search and remove statistics: `grep -r \"statistics\\|stats\" src/`\n- Search and remove caching: `grep -r \"cache\" src/`\n- Search and remove task ordering: `grep -r \"order\\|position\\|sequence\" src/`\n- Search and remove archiving: `grep -r \"archive\" src/`\n\n### Error Handling Improvements\n- Search: `grep -r \"throw new Error\" src/`\n- For each generic error:\n  - Add context (current value, expected value)\n  - Add fix guidance\n  - Use proper error type\n\n### Terminology Consistency\n- Search: `grep -r \"todo\" src/ tests/ --ignore-case`\n- Replace all \"todo\" with \"task\" terminology\n- Update TodoItem to Task, TodoList to TaskList, TodoStatus to TaskStatus\n- Ensure consistent terminology across all files\n\nAction: Fix all architecture and best practice violations before proceeding to Phase 4\n\n## Phase 4: Documentation Validation & Fixes\nObjective: Ensure complete, accurate, up-to-date documentation\n\n### Code Documentation Additions\n- Search for public APIs without JSDoc:\n  `grep -r \"export (function|class|interface)\" src/ --include=\"*.ts\"`\n- For each missing JSDoc:\n  - Add comprehensive JSDoc\n  - Include description, params, returns, examples\n\n### README Updates\n- Read: README.md\n- Verify: Installation instructions work\n- Verify: Usage examples are current\n- Update: Any outdated information\n- Add: Missing features\n- Ensure examples use correct terminology (task, not todo)\n\n### API Documentation Updates\n- Check: All MCP tools documented in docs/api/\n- For each undocumented tool:\n  - Create documentation file\n  - Add parameter descriptions\n  - Add usage examples\n  - Add error responses\n\n### Documentation Cleanup\n- Search for outdated docs:\n  `grep -r \"deprecated\" docs/`\n  `grep -r \"old\" docs/`\n- Update or remove outdated content\n- Ensure consistency across docs\n- Remove documentation for deleted features\n\nAction: Fix all documentation issues before proceeding to Phase 5\n\n## Phase 5: Workspace Cleanliness & Fixes\nObjective: Achieve organized, clean workspace with only necessary files\n\n### Temporary Files Removal\n- Search: `find . -name \"*.tmp\" -o -name \"*.temp\" -o -name \"*~\" -o -name \"*.bak\" | grep -v node_modules`\n- For each file found: Delete the file\n- Search: `find . -name \"*-summary*\" -o -name \"*-analysis*\" -o -name \"*-notes*\" | grep -v node_modules`\n- For each file found:\n  - Review content\n  - Delete if temporary\n  - Rename if needed\n\n### Git Configuration Fixes\n- Read: .gitignore\n- If .kiro/ not in .gitignore: Add .kiro/ to .gitignore\n- If node_modules/, dist/, coverage/ not in .gitignore: Add them\n- Verify: No sensitive data in tracked files\n\n### Unused Files Removal\n- Identify unused source files by checking imports across codebase\n- For each unused file:\n  - Verify truly unused\n  - Delete the file and corresponding test\n- Remove dead code and unused dependencies from package.json\n\n### Directory Organization\n- Check for orphaned files in root\n- Move files to appropriate directories\n- Ensure logical domain-driven structure\n\nAction: Fix all workspace cleanliness issues before proceeding to Phase 6\n\n## Phase 6: GitHub Hosting Readiness & Security Fixes\nObjective: Ensure project is ready for GitHub hosting and secure\n\n### Standard Files Verification & Creation\n- Check: README.md exists and is comprehensive\n- If missing/incomplete: Create/update comprehensive README\n- Check: LICENSE file exists\n- If missing: Create LICENSE file\n- Check: CONTRIBUTING.md exists\n- If missing: Create CONTRIBUTING.md\n\n### Repository Metadata Fixes\n- Read: package.json\n- If missing description: Add description\n- If missing keywords: Add relevant keywords\n- If missing repository URL: Add repository URL\n- If missing license field: Add license field\n- If missing author: Add author information\n\n### Security Fixes\n- Run: `npm audit`\n- If vulnerabilities found:\n  - Run: `npm audit fix`\n  - If high/critical remain: Investigate and fix manually\n- Search for hardcoded secrets:\n  `grep -r \"password\" src/ --include=\"*.ts\" | grep -v \"Password\"`\n  `grep -r \"api_key\" src/ --include=\"*.ts\"`\n  `grep -r \"secret\" src/ --include=\"*.ts\" | grep -v \"Secret\"`\n- For each found: Remove and use environment variables\n\n### Installation Verification\n- Verify: package.json scripts are complete\n- Verify: All dependencies listed\n- Test: Build works in clean environment\n\nAction: Fix all GitHub hosting and security issues\n\n## Phase 7: Final Validation & Commit\nObjective: Ensure all fixes are working and commit changes\n\n### Final Verification\n- Run: `timeout 60s npm run build` - Must pass\n- Run: `timeout 120s npm test -- --run` - Must pass\n- Run: `timeout 30s npm run lint` - Must pass\n- Check: `grep -r \"TODO\" src/ tests/` - Must return nothing\n- Check: `find . -name \"*-temp*\" -o -name \"*-old*\" | grep -v node_modules` - Must return nothing\n- Verify: .gitignore includes .kiro/\n- Verify: No forbidden patterns exist\n- Verify: Coverage meets thresholds (95% line, 90% branch)\n\n### Commit Changes\n- If fixes were applied:\n  - Stage all changes: `git add .`\n  - Commit with descriptive message explaining what violations were fixed\n  - Example: \"fix: resolve code quality issues - remove @ts-ignore patterns, fix naming conventions, improve test coverage, update documentation\"\n\nREMEDIATION EXECUTION RULES:\n- Fix Immediately: Don't just report - fix every issue as you find it\n- Verify Each Fix: After fixing, verify the fix worked\n- Persist Until Complete: Don't stop until all validations pass\n- Use Tools: Read files, search patterns, run commands - don't guess\n- Sequential Phases: Complete each phase fully before moving to next\n- Take Ownership: Fix unrelated failures - they're still your responsibility\n- Follow Three Pillars: Plan, Use Tools, Persist\n\nREPORTING FORMAT:\nFor each phase, provide:\n\nBefore Fixes:\n❌ Issues found (with locations)\n\nFixes Applied:\n🔧 What was fixed\n📝 How it was fixed\n✅ Verification result\n\nAfter Fixes:\n✅ Phase status (PASS/FAIL)\n📊 Metrics (if applicable)\n\nCOMPLETION CRITERIA:\nTask is considered COMPLETE only when ALL of the following are true:\n✅ Zero TypeScript errors (FIXED)\n✅ Zero TypeScript warnings (FIXED)\n✅ Zero ESLint errors/warnings (FIXED)\n✅ All tests pass (FIXED)\n✅ Test coverage ≥ 95% line, ≥ 90% branch (ACHIEVED)\n✅ Build succeeds (VERIFIED)\n✅ Documentation complete and current (UPDATED)\n✅ No temporary files (REMOVED)\n✅ Workspace organized and clean (CLEANED)\n✅ GitHub hosting ready (VERIFIED)\n✅ No forbidden patterns (REMOVED)\n✅ No naming violations (RENAMED)\n✅ Architecture patterns followed (REFACTORED)\n✅ Error handling comprehensive (IMPROVED)\n✅ No TODOs (COMPLETED)\n✅ Best practices compliance (VERIFIED)\n✅ Domain-driven architecture (IMPLEMENTED)\n✅ Security issues resolved (FIXED)\n\nREMEMBER: Your job is to FIX, not just REPORT. Bring the workspace to expected state before ending turn. Follow the coding-practices.md steering document religiously."
  }
}
