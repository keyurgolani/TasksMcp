# Docker Compose configuration for production
version: '3.8'

services:
  task-list-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: task-list-mcp-prod
    environment:
      - NODE_ENV=production
      - STORAGE_TYPE=postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=mcp_tasks
      - POSTGRES_USER=mcpuser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - HEALTH_CHECK_ENABLED=true
      - BACKUP_ENABLED=true
      - BACKUP_SCHEDULE=0 2 * * *
      - METRICS_ENABLED=true
      - RATE_LIMIT_ENABLED=true
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics port
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  postgres:
    image: postgres:15-alpine
    container_name: task-list-mcp-postgres-prod
    environment:
      - POSTGRES_DB=mcp_tasks
      - POSTGRES_USER=mcpuser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcpuser -d mcp_tasks"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: task-list-mcp-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: task-list-mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - task-list-mcp
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  app_data:
  app_logs: